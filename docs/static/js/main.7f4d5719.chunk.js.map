{"version":3,"sources":["AddCategory.js","GifGridItem.js","helpers/getGifs.js","GifGrid.js","hooks/useFetchGifs.js","Gif-expert.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","value","onChange","console","log","target","type","GifGridItem","id","title","src","className","alt","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","categoria","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAiBhD,OACE,0BAAMC,SAVc,SAACC,GACrBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAyBO,OACvCN,EAAc,OAMd,2BAAOO,MAAOR,EAAYS,SAhBT,SAACN,GACpBO,QAAQC,IAAIR,EAAES,OAAOJ,OACrBP,EAAcE,EAAES,OAAOJ,QAc6BK,KAAK,WCpBhDC,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACvC,OACE,yBAAKC,UAAU,0CACb,yBAAKD,IAAKA,EAAKE,IAAKH,IACpB,2BAAIA,K,uBCNGI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,8DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBV,QAVjB,kBAcdM,GAdc,4CAAH,sDCMPK,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECHb,SAACc,GAAe,IAAD,EACfpC,mBAAS,CACjC6B,KAAM,GACNQ,SAAS,IAH8B,mBAClCC,EADkC,KAC3BC,EAD2B,KAezC,OATAC,qBAAU,WACRnB,EAAQe,GAAWK,MAAK,SAACC,GACvBH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGZ,CAACD,IAEGE,EDTmBK,CAAarB,GAA/BO,EAH+B,EAG/BA,KAAMQ,EAHyB,EAGzBA,QAOd,OACE,oCACE,wBAAIlB,UAAU,qCAAqCG,GAClDe,GAAW,uBAAGlB,UAAU,oCAAb,YACZ,yBAAKA,UAAU,aACZU,EAAKE,KAAI,SAACC,GACT,OAAO,kBAAC,EAAD,eAAaY,IAAKZ,EAAG,IAAYA,UEjBrCa,EAAe,WAAM,MAGI7C,mBAAS,CAAC,YAHd,mBAGzB8C,EAHyB,KAGb/C,EAHa,KAUhC,OACE,oCACE,4CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BACG+C,EAAWf,KAAI,SAACvB,EAAKuC,GACpB,OAAO,kBAAC,EAAD,CAASH,IAAKpC,EAAKc,SAAUd,UCjB9CwC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.7f4d5719.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handlerInput = (e) => {\r\n    console.log(e.target.value);\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handlerSubmit = (e) => {\r\n    e.preventDefault();\r\n    // console.log('Submit hecho');\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cat) => [inputValue, ...cat]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handlerSubmit}>\r\n      <input value={inputValue} onChange={handlerInput} type='text' />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, src }) => {\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n      <img src={src} alt={title}></img>\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&api_key=S6cVxP7wmVKlKIlNUpwMc29tP0RVe7IR&limit=4`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      src: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { getGifs } from './helpers/getGifs';\r\nimport { useFetchGifs } from './hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  //   const [images, setImages] = useState([]);\r\n\r\n  const { data, loading } = useFetchGifs(category);\r\n\r\n  //   Que se dispara unicamente si la categoria cambia\r\n  //   useEffect(() => {\r\n  //     getGifs(category).then(setImages);\r\n  //   }, [category]);\r\n\r\n  return (\r\n    <>\r\n      <h1 className='animate__animated animate__fadeIn'>{category}</h1>\r\n      {loading && <p className='animate__animated animate__flash'>Cargando</p>}\r\n      <div className='card-grid'>\r\n        {data.map((img) => {\r\n          return <GifGridItem key={img['id']} {...img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(categoria).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [categoria]);\r\n\r\n  return state;\r\n};\r\n","import React, { Component, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n  //   categories = ['One Punch', 'Fifa 2020'];\r\n\r\n  const [categories, setCategories] = useState(['Bascket']);\r\n\r\n  const handleArr = () => {\r\n    setCategories([...categories, 'Hola']);\r\n    // setCategories((categorias) => [...categorias, 'Hola']);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <hr />\r\n      <AddCategory setCategories={setCategories} />\r\n      <ol>\r\n        {categories.map((cat, index) => {\r\n          return <GifGrid key={cat} category={cat} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './Gif-expert';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}